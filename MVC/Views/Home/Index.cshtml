@using tmp
@model t_tasks
@{
    ViewData["Title"] = "Task";
    Layout = "../Shared/_Layout.cshtml";
}

<!-- Include Kendo UI Theme -->
@* <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2023.2.718/styles/kendo.default.min.css" /> *@

<!-- Custom CSS -->
<style>
    /* Custom styles for the grid */
    #grid {
        margin: 20px;
        font-family: Arial, sans-serif;
    }

    /* Style the grid header */
    .k-grid-header {
        background-color: #007bff;
        color: white;
        font-weight: bold;
    }

    /* Style the grid toolbar */
    .k-grid-toolbar {
        background-color: #f8f9fa;
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    /* Style the grid rows */
    .k-grid-content tr:hover {
        background-color: #f1f1f1;
    }

    /* Style the edit and delete buttons */
    .k-grid-edit,
    .k-grid-delete {
        color: #007bff;
        text-decoration: none;
        margin: 0 5px;
    }

    .k-grid-edit:hover,
    .k-grid-delete:hover {
        color: #0056b3;
    }

    /* Style the popup editor */
    .k-popup-edit-form {
        padding: 20px;
        background-color: #f8f9fa;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    /* Style the dropdown in the editor */
    .k-dropdown {
        width: 100%;
    }

    /* Custom CSS to increase icon size */
    .k-grid .k-icon {
        font-size: 20px;
        /* Adjust the size as needed */
    }

    /* Optional: Add padding to make the buttons look better */
    .k-grid .k-button {
        padding: 6px 10px;
    }
    #grid {
    overflow: hidden; /* This can hide columns */
}

    /* Make the grid responsive */
    @@media(max - width: 768px) {
            .k-grid {
                font-size: 14px;
            }

            .k-grid-header th {
                white-space: nowrap;
            }
        }
    </style>


    <div id="grid" style="width: 1200px;"></div>
    @section Scripts
    {
        <script>
            $(document).ready(function () {
                var dataSource = new kendo.data.DataSource({
                    transport: {
                        read: {
                            url: "http://localhost:5245/api/Task",
                            dataType: "json",
                            error: function (e) {
                                console.error("Error reading data:", e);
                            }
                        },
                        create: {
                            url: "http://localhost:5245/api/Task",
                            type: "POST",
                            contentType: "application/json",
                            dataType: "json",
                            error: function (e) {
                                console.error("Error creating data:", e);
                            }
                        },
                        update: {
                            url: "http://localhost:5245/api/Task",
                            type: "PUT",
                            contentType: "application/json",
                            dataType: "json",
                            error: function (e) {
                                console.error("Error updating data:", e);
                            }
                        },
                        destroy: {
                            url: function (data) {
                                return "http://localhost:5245/api/Task/" + data.c_task_id;
                            },
                            type: "DELETE",
                            contentType: "application/json",
                            dataType: "json",
                            error: function (e) {
                                console.error("Error deleting data:", e);
                            }
                        },
                        parameterMap: function (data, type) {
                            if (type === "create" || type === "update") {
                                if (type === "create") {
                                    data.c_created_by = 1;
                                    data.c_assigned_to = 2;
                                }
                                if (type === "update") {
                                    data.c_task_id = data.c_task_id;
                                }
                                console.log("Sending data:", data);
                                return JSON.stringify(data);
                            }
                            return data;
                        }
                    },
                    pageSize: 10,
                    schema: {
                        model: {
                            id: "c_task_id",
                            fields: {
                                c_task_id: { type: "number", editable: false },
                                c_title: {
                                    type: "string",
                                    validation: {
                                        required: { message: "Title is required" } // Custom validation message
                                    }
                                },
                                c_description: { type: "string" },
                                c_status: {
                                    type: "number",
                                    validation: {
                                        required: { message: "Status is required" } // Custom validation message
                                    }
                                },
                                c_priority: {
                                    type: "number",
                                    validation: {
                                        required: { message: "Priority is required" },
                                        min: { value: 1, message: "Priority must be at least 1" },
                                        max: { value: 5, message: "Priority cannot exceed 5" }
                                    }
                                },
                                c_due_date: { type: "date" },
                                c_created_at: { type: "date", editable: false },
                                c_updated_at: { type: "date", editable: false },
                                c_created_by: { type: "number", editable: false },
                                c_assigned_to: { type: "number", editable: false }
                            }
                        }
                    }
                });

                $("#grid").kendoGrid({
                    dataSource: dataSource,
                    columns: [
                        { field: "c_task_id", title: "Task ID", width: "100px" },
                        { field: "c_title", title: "Title", width: "150px" },
                        { field: "c_description", title: "Description", width: "200px" },
                        { field: "c_status", title: "Status", editor: statusDropDownEditor, template: "#= statusText(c_status) #", width: "120px" },
                        { field: "c_priority", title: "Priority", width: "100px" },
                        { field: "c_due_date", title: "Due Date", format: "{0:MM/dd/yyyy}", width: "120px" },
                        { field: "c_created_at", title: "Created At", format: "{0:MM/dd/yyyy}", width: "120px", editable: false },
                        { field: "c_updated_at", title: "Updated At", format: "{0:MM/dd/yyyy}", width: "120px", editable: false },
                        { field: "c_created_by", title: "Created By", width: "120px", editable: false },
                        { field: "c_assigned_to", title: "Assigned To", width: "120px", editable: false },
                        {
                            command: [
                                {
                                    name: "edit",
                                    text: { edit: "", update: "Update", cancel: "Cancel" },
                                    className: "k-icon k-i-edit"
                                },
                                {
                                    name: "destroy",
                                    text: "",
                                    className: "k-icon k-i-close"
                                }
                            ],
                            title: "Actions",
                            width: "150px"
                        }
                    ],
                    editable: "popup",
                    toolbar: [
                        {
                            name: "create",
                            text: "",
                            className: "k-icon k-i-add"
                        }
                    ],
                    pageable: true,
                    sortable: true,
                    filterable: {
                        extra: false,
                        operators: {
                            string: {
                                contains: "Contains",
                                eq: "Equal"
                            }
                        },
                        messages: {
                            filter: "Filter",
                            clear: "Clear",
                            info: "Filter by:"
                        }
                    },
                    messages: {
                        commands: {
                            canceledit: "Cancel",
                            update: "Update"
                        },
                        editable: {
                            confirmation: "Are you sure you want to delete this record?",
                            cancel: "Cancel",
                            save: "Save"
                        }
                    }
                });

                dataSource.bind("requestEnd", function (e) {
                    if (e.type === "create" || e.type === "update" || e.type === "destroy") {
                        dataSource.read();
                    }
                });

                $("#grid").on("click", ".k-grid-cancel-changes", function () {
                    dataSource.cancelChanges();
                });
            });

            function statusDropDownEditor(container, options) {
                $('<input required id="c_status" name="c_status">')
                    .appendTo(container)
                    .kendoDropDownList({
                        dataSource: [
                            { text: "Pending", value: 1 },
                            { text: "In Progress", value: 2 },
                            { text: "Completed", value: 3 }
                        ],
                        dataTextField: "text",
                        dataValueField: "value",
                        optionLabel: "Select Status"
                    });
            }

            function statusText(status) {
                switch (status) {
                    case 1: return "Pending";
                    case 2: return "In Progress";
                    case 3: return "Completed";
                    default: return "Unknown";
                }
            }
        </script>
    }