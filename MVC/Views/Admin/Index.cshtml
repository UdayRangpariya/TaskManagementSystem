@{
    ViewData["Title"] = "Admin Dashboard";
}
@model Repositories.Model.AdminModels.TaskModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TaskTrackPro - Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3a7bd5;
            --primary-hover: #2d62aa;
            --secondary-color: #2c3e50;
            --light-bg: #f8f9fa;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --success-color: #2ecc71;
            --dark-text: #2c3e50;
            --border-color: #dee2e6;
        }

        body {
            background-color: var(--light-bg);
            font-family: 'Segoe UI', sans-serif;
            overflow-x: hidden;
        }

        .page-container {
            padding: 24px;
        }

        .dashboard-header {
            margin-bottom: 24px;
        }

        .top-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .page-title {
            font-size: 1.75rem;
            font-weight: 600;
            color: var(--dark-text);
        }

        .notification-bell, .chat-icon {
            position: relative;
            cursor: pointer;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #ffffff;
            border-radius: 50%;
            transition: all 0.2s;
            border: 1px solid var(--border-color);
            color: var(--dark-text);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .notification-bell:hover, .chat-icon:hover {
            background-color: var(--light-bg);
            transform: translateY(-2px);
        }

        .notification-count {
            position: absolute;
            top: -4px;
            right: -4px;
            font-size: 12px;
            padding: 2px 6px;
            background-color: var(--danger-color);
            color: white;
            border-radius: 12px;
        }

        .notification-dropdown {
            width: 320px;
            padding: 0;
            border-radius: 8px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
            border: none;
        }

        .notification-header {
            padding: 12px 16px;
            font-weight: 600;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .notification-item {
            padding: 12px 16px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            transition: background-color 0.2s;
        }

        .notification-item:last-child {
            border-bottom: none;
        }

        .notification-item.unread {
            background-color: rgba(58, 123, 213, 0.1);
        }

        .notification-item:hover {
            background-color: rgba(0, 0, 0, 0.02);
        }

        .dashboard-card {
            border: none;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
            background-color: white;
        }

        .card-header {
            background-color: white;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            padding: 16px;
            border-radius: 8px 8px 0 0;
        }

        .table thead th {
            background-color: rgba(0, 0, 0, 0.02);
            padding: 12px 16px;
            font-weight: 600;
        }

        .table tbody td {
            padding: 12px 16px;
            vertical-align: middle;
        }

        .table tbody tr:hover {
            background-color: rgba(0, 0, 0, 0.02);
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-active {
            background-color: rgba(46, 204, 113, 0.15);
            color: var(--success-color);
        }

        .status-inactive {
            background-color: rgba(231, 76, 60, 0.15);
            color: var(--danger-color);
        }

        #chatMessages {
            background-color: var(--light-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        #chatInput {
            resize: none;
        }

        .user-list-item {
            padding: 0.75rem 1.25rem;
            border-bottom: 1px solid var(--border-color);
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .user-list-item:hover {
            background-color: rgba(0, 0, 0, 0.02);
        }

        .user-list-item:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body>
    <div class="page-container">
        <div class="dashboard-header">
            <div class="top-header">
                <h1 class="page-title">
                    <i class="fas fa-tachometer-alt me-2"></i>Admin Dashboard
                </h1>
                <div class="d-flex gap-3 align-items-center">
                    <div class="dropdown">
                        <div class="notification-bell" id="notificationBell">
                            <i class="fas fa-bell"></i>
                            <span class="notification-count" id="unreadCount">0</span>
                        </div>
                        <div class="dropdown-menu dropdown-menu-end notification-dropdown" id="notificationDropdown">
                            <div class="notification-header d-flex justify-content-between align-items-center">
                                <span>Notifications</span>
                                <a href="#" class="text-primary small" id="markAllRead">Mark all as read</a>
                            </div>
                            <div id="notificationList"></div>
                        </div>
                    </div>
                    <div class="chat-icon" id="chatIcon">
                        <i class="fas fa-comments"></i>
                    </div>
                    <div class="dropdown">
                        <div class="d-flex align-items-center cursor-pointer" id="userProfileDropdown" data-bs-toggle="dropdown">
                            <div class="avatar bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 40px; height: 40px;">
                                <i class="fas fa-user"></i>
                            </div>
                            <div>
                                <div class="fw-bold">Admin</div>
                            </div>
                            <i class="fas fa-chevron-down ms-2 text-muted small"></i>
                        </div>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="#"><i class="fas fa-user-circle me-2"></i> My Profile</a></li>
                            <li><a class="dropdown-item" href="#"><i class="fas fa-cog me-2"></i> Account Settings</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item text-danger" href="#" id="logoutBtnDropdown"><i class="fas fa-sign-out-alt me-2"></i> Logout</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Dashboard Content -->
        <div class="dashboard-card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">User Management</h5>
                <button class="btn btn-primary btn-sm" id="addUserBtn"><i class="fas fa-plus me-1"></i> Add User</button>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Status</th>
                                <th>Tasks</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody"></tbody>
                    </table>
                    <div class="loader text-center py-4" id="usersLoader" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- User List Modal -->
        <div class="modal fade" id="userListModal" tabindex="-1" aria-labelledby="userListModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="userListModalLabel">Select a User to Chat</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" id="userList" style="max-height: 400px; overflow-y: auto;"></div>
                </div>
            </div>
        </div>

        <!-- Chat Modal -->
        <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="chatModalLabel">Chat with <span id="chatRecipientName"></span></h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="chatMessages" style="height: 300px; overflow-y: auto;"></div>
                        <textarea id="chatInput" class="form-control mt-2" rows="2" placeholder="Type a message..."></textarea>
                        <button id="btnSendMessage" class="btn btn-primary mt-2">
                            <i class="fas fa-paper-plane me-2"></i>Send
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Task Modal -->
        <div class="modal fade" id="tasksModal" tabindex="-1" aria-labelledby="tasksModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="tasksModalLabel"><i class="fas fa-tasks me-2"></i> Tasks for <span id="modalUserName"></span></h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="loader text-center py-4" id="tasksLoader" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                        <div id="tasksContainer"></div>
                        <div class="mt-4">
                            <h6 class="border-bottom pb-2 mb-3">Add New Task</h6>
                            <form id="addTaskForm">
                                <div class="mb-3">
                                    <label for="taskTitle" class="form-label">Title</label>
                                    <input type="text" class="form-control" id="taskTitle" placeholder="Enter task title" required>
                                </div>
                                <div class="mb-3">
                                    <label for="taskDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="taskDescription" rows="3" placeholder="Enter task description" required></textarea>
                                </div>
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label for="taskStatus" class="form-label">Status</label>
                                        <select class="form-select" id="taskStatus">
                                            <option value="0">Pending</option>
                                            <option value="1">In Progress</option>
                                            <option value="2">Completed</option>
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="taskPriority" class="form-label">Priority</label>
                                        <select class="form-select" id="taskPriority">
                                            <option value="1">Low</option>
                                            <option value="2">Medium</option>
                                            <option value="3">High</option>
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="taskDueDate" class="form-label">Due Date</label>
                                        <input type="date" class="form-control" id="taskDueDate" required>
                                    </div>
                                </div>
                                <div class="text-end mt-3">
                                    <button type="submit" class="btn btn-primary"><i class="fas fa-plus me-1"></i> Add Task</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add User Modal -->
        <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="addUserModalLabel"><i class="fas fa-user-plus me-2"></i> Add New User</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addUserForm">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label for="firstName" class="form-label">First Name</label>
                                    <input type="text" class="form-control" id="firstName" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="lastName" class="form-label">Last Name</label>
                                    <input type="text" class="form-control" id="lastName" required>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <input type="password" class="form-control" id="password" required>
                            </div>
                            <div class="mb-3">
                                <label for="role" class="form-label">Role</label>
                                <select class="form-select" id="role">
                                    <option value="1">User</option>
                                    <option value="0">Admin</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="isActive" checked>
                                    <label class="form-check-label" for="isActive">Active</label>
                                </div>
                            </div>
                            <div class="text-end">
                                <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Add User</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        $(document).ready(function () {
            const currentUser = JSON.parse(localStorage.getItem('currentUser')) || {};
            const currentUserId = currentUser.userId || 0;
            const token = getAuthToken();
            const ADMIN_ID = currentUserId;

            // Utility Functions
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null;
            }

            function getAuthToken() {
                const localToken = localStorage.getItem('jwtToken');
                return localToken || getCookie('jwtToken');
            }

            function authenticatedAjax(options) {
                const token = getAuthToken();
                const defaults = {
                    headers: { 'Authorization': 'Bearer ' + token }
                };
                return $.ajax({ ...defaults, ...options });
            }

            function debounce(func, wait) {
                let timeout;
                return function (...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            // Notification SignalR Connection
            const notificationConnection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5245/notificationHub", {
                    accessTokenFactory: () => getAuthToken(),
                    transport: signalR.HttpTransportType.WebSockets
                })
                .configureLogging(signalR.LogLevel.Debug)
                .withAutomaticReconnect()
                .build();

            notificationConnection.start()
                .then(() => notificationConnection.invoke("JoinUserGroup"))
                .catch(err => console.error("Notification SignalR Error:", err));

            // Chat SignalR Connection
            const chatConnection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5245/chatHub", {
                    accessTokenFactory: () => getAuthToken(),
                    transport: signalR.HttpTransportType.WebSockets
                })
                .configureLogging(signalR.LogLevel.Debug)
                .withAutomaticReconnect()
                .build();

            chatConnection.start()
                .then(() => chatConnection.invoke("JoinChat", currentUserId.toString()))
                .catch(err => console.error("Chat SignalR Error:", err));

            // Notification Functions
            function loadNotifications() {
                authenticatedAjax({
                    url: 'http://localhost:5245/api/AdminApi/my-notifications',
                    method: 'GET',
                    success: function (response) {
                        const notifications = response.notifications || [];
                        $('#notificationList').empty();
                        if (notifications.length > 0) {
                            let unreadCount = 0;
                            notifications.forEach(n => {
                                if (!n.c_is_read) unreadCount++;
                                appendNotificationToDropdown(n);
                            });
                            $('#unreadCount').text(unreadCount).toggle(unreadCount > 0);
                        } else {
                            $('#notificationList').html('<div class="p-3 text-center text-muted">No notifications</div>');
                            $('#unreadCount').hide();
                        }
                    },
                    error: function (xhr) {
                        $('#notificationList').html('<div class="p-3 text-center text-danger">Failed to load notifications</div>');
                        if (xhr.status === 401) window.location.href = '/Auth/Login';
                    }
                });
            }

            const debouncedLoadNotifications = debounce(loadNotifications, 1000);

            function appendNotificationToDropdown(notification) {
                const date = new Date(notification.c_created_at).toLocaleString('en-US', {
                    month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true
                });
                const unreadClass = notification.c_is_read ? '' : 'unread';
                const boldClass = notification.c_is_read ? '' : 'fw-bold';
                const item = `
                    <div class="notification-item ${unreadClass}" data-notification-id="${notification.c_notification_id}">
                        <div class="notification-message ${boldClass}">${notification.c_message}</div>
                        <div class="notification-time">${date}</div>
                        ${!notification.c_is_read ? `
                            <button class="btn btn-sm btn-outline-primary mark-as-read" data-notification-id="${notification.c_notification_id}">
                                Mark as Read
                            </button>
                        ` : ''}
                    </div>
                `;
                $('#notificationList').append(item);
            }

            function toggleNotificationDropdown() {
                $('#notificationDropdown').toggleClass('show');
            }

            notificationConnection.on("ReceiveNotification", (data) => {
                const notifications = data.notifications || [];
                $('#notificationList').empty();
                if (notifications.length > 0) {
                    let unreadCount = 0;
                    notifications.forEach(n => {
                        if (!n.c_is_read) unreadCount++;
                        appendNotificationToDropdown(n);
                    });
                    $("#unreadCount").text(data.count).toggle(data.count > 0);
                } else {
                    $('#notificationList').html('<div class="p-3 text-center text-muted">No notifications</div>');
                    $("#unreadCount").hide();
                }
            });

            notificationConnection.on("NotificationMarkedAsRead", (notificationId) => {
                const $item = $(`[data-notification-id="${notificationId}"]`);
                $item.removeClass("unread").find(".notification-message").removeClass("fw-bold");
                $item.find(".mark-as-read").remove();
                const unreadCount = $('.notification-item.unread').length;
                $("#unreadCount").text(unreadCount).toggle(unreadCount > 0);
            });

            notificationConnection.on("AllNotificationsMarkedAsRead", () => {
                $("#notificationList").empty().html('<div class="p-3 text-center text-muted">No notifications</div>');
                $("#unreadCount").text(0).hide();
            });

            function initializeNotifications() {
                $('#notificationBell').click(function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    toggleNotificationDropdown();
                    debouncedLoadNotifications();
                });

                $(document).on('click', function (e) {
                    if (!$(e.target).closest('#notificationDropdown, #notificationBell').length) {
                        $('#notificationDropdown').removeClass('show');
                    }
                });

                $('#markAllRead').click(function (e) {
                    e.preventDefault();
                    notificationConnection.invoke("MarkAllNotificationsAsRead").catch(err => console.error(err));
                });

                $(document).on('click', '.mark-as-read', function () {
                    const notificationId = parseInt($(this).data('notification-id'));
                    notificationConnection.invoke("MarkNotificationAsRead", notificationId)
                        .catch(err => console.error("Error marking notification:", err));
                });

                debouncedLoadNotifications();
                setInterval(debouncedLoadNotifications, 30000);
            }

            // Chat Functions
            function loadUserList() {
                authenticatedAjax({
                    url: 'http://localhost:5245/api/AdminApi/users',
                    type: 'GET',
                    success: function (users) {
                        $('#userList').empty();
                        if (users && users.length > 0) {
                            users.forEach(user => {
                                if (user.c_user_id != currentUserId) {
                                    const item = `
                                        <div class="user-list-item" data-user-id="${user.c_user_id}">
                                            <i class="fas fa-user me-2"></i>User ${user.c_user_id} - ${user.c_username} 
                                        </div>
                                    `;
                                    $('#userList').append(item);
                                }
                            });
                        } else {
                            $('#userList').html('<div class="p-3 text-center text-muted">No users found</div>');
                        }
                    },
                    error: function (xhr) {
                        $('#userList').html('<div class="p-3 text-center text-danger">Failed to load users</div>');
                        if (xhr.status === 401) window.location.href = '/Auth/Login';
                    }
                });
            }

            function appendMessageToChat(senderId, content, timestamp, isSent) {
                const date = new Date(timestamp).toLocaleString('en-US', {
                    hour: 'numeric', minute: 'numeric', hour12: true
                });
                const messageClass = isSent ? 'text-end text-primary' : 'text-start text-secondary';
                const message = `
                    <div class="${messageClass} mb-2">
                        <div class="badge ${isSent ? 'bg-primary' : 'bg-secondary'} text-white p-2">
                            ${content}
                        </div>
                        <div class="small text-muted mt-1">${date}</div>
                    </div>
                `;
                $('#chatMessages').append(message);
                $('#chatMessages').scrollTop($('#chatMessages')[0].scrollHeight);
            }

            function loadChatHistory(senderId, recipientId) {
                authenticatedAjax({
                    url: `http://localhost:5245/api/chat/history/${senderId}/${recipientId}`,
                    type: 'GET',
                    success: function (history) {
                        $('#chatMessages').empty();
                        history.forEach(msg => {
                            appendMessageToChat(msg.c_sender_id, msg.c_content, msg.c_timestamp, msg.c_sender_id == currentUserId);
                        });
                    },
                    error: function (xhr) {
                        toastr.error('Failed to load chat history.');
                        if (xhr.status === 401) window.location.href = '/Auth/Login';
                    }
                });
            }

            chatConnection.on("ReceiveMessage", (senderId, content, timestamp) => {
                if ($('#chatModal').is(':visible')) {
                    const recipientId = $('#chatModal').data('recipientId');
                    if (senderId == recipientId) {
                        appendMessageToChat(senderId, content, timestamp, false);
                    }
                }
                toastr.info(`New message from User ${senderId}`);
            });

            // User Management
            function loadUsers() {
                $('#usersLoader').show();
                $('#usersTableBody').empty();

                authenticatedAjax({
                    url: 'http://localhost:5245/api/AdminApi/users',
                    method: 'GET',
                    success: function (users) {
                        $('#usersLoader').hide();
                        if (users && users.length > 0) {
                            users.forEach(user => {
                                if (user.c_user_id !== ADMIN_ID) {
                                    appendUserToTable(user);
                                }
                            });
                        } else {
                            $('#usersTableBody').html('<tr><td colspan="7" class="text-center">No users found</td></tr>');
                        }
                    },
                    error: function (xhr) {
                        $('#usersLoader').hide();
                        $('#usersTableBody').html('<tr><td colspan="7" class="text-center text-danger">Error loading users</td></tr>');
                        if (xhr.status === 401) window.location.href = '/Auth/Login';
                    }
                });
            }

            function appendUserToTable(user) {
                const fullName = `${user.c_username}`;
                const statusClass = user.c_is_active ? 'status-active' : 'status-inactive';
                const statusText = user.c_is_active ? 'Active' : 'Inactive';

                const row = `
                    <tr>
                        <td>${user.c_user_id}</td>
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="avatar bg-light text-secondary rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 36px; height: 36px;">
                                    <i class="fas fa-user"></i>
                                </div>
                                <div>${fullName}</div>
                            </div>
                        </td>
                        <td>${user.c_email}</td>
                        <td>${user.c_role === 0 ? 'Admin' : 'User'}</td>
                        <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                        <td>
                            <button class="btn btn-primary btn-sm btn-view-task" data-user-id="${user.c_user_id}" data-user-name="${fullName}">
                                <i class="fas fa-tasks me-1"></i> View Tasks
                            </button>
                        </td>
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-light btn-sm" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item edit-user" href="#" data-user-id="${user.c_user_id}"><i class="fas fa-edit me-2"></i> Edit</a></li>
                                    <li><a class="dropdown-item ${user.c_is_active ? 'deactivate-user' : 'activate-user'}" href="#" data-user-id="${user.c_user_id}">
                                        <i class="fas ${user.c_is_active ? 'fa-user-slash' : 'fa-user-check'} me-2"></i>
                                        ${user.c_is_active ? 'Deactivate' : 'Activate'}
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item text-danger delete-user" href="#" data-user-id="${user.c_user_id}">
                                        <i class="fas fa-trash-alt me-2"></i> Delete
                                    </a></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                `;
                $('#usersTableBody').append(row);
            }

            // Task Management
            $(document).on('click', '.btn-view-task', function () {
                const userId = $(this).data('user-id');
                const userName = $(this).data('user-name');
                openTasksModal(userId, userName);
            });

            function openTasksModal(userId, userName) {
                $('#modalUserName').text(userName);
                $('#tasksContainer').empty();
                $('#tasksLoader').show();

                const today = new Date().toISOString().split('T')[0];
                $('#taskDueDate').val(today);

                const tasksModal = new bootstrap.Modal(document.getElementById('tasksModal'));
                tasksModal.show();

                authenticatedAjax({
                    url: `http://localhost:5245/api/AdminApi?createdBy=${ADMIN_ID}&assignedTo=${userId}`,
                    method: 'GET',
                    success: function (tasks) {
                        $('#tasksLoader').hide();
                        if (tasks && tasks.length > 0) {
                            tasks.forEach(task => appendTaskToModal(task));
                        } else {
                            $('#tasksContainer').html('<div class="alert alert-info">No tasks assigned to this user yet.</div>');
                        }
                    },
                    error: function (xhr) {
                        $('#tasksLoader').hide();
                        $('#tasksContainer').html('<div class="alert alert-danger">Error loading tasks</div>');
                        if (xhr.status === 401) window.location.href = '/Auth/Login';
                    }
                });

                $('#addTaskForm')[0].reset();
                $('#addTaskForm').off('submit').on('submit', function (e) {
                    e.preventDefault();
                    const taskData = {
                        c_title: $('#taskTitle').val(),
                        c_description: $('#taskDescription').val(),
                        c_status: parseInt($('#taskStatus').val()),
                        c_priority: parseInt($('#taskPriority').val()),
                        c_due_date: new Date($('#taskDueDate').val()).toISOString(),
                        c_created_at: new Date().toISOString(),
                        c_updated_at: new Date().toISOString(),
                        c_created_by: ADMIN_ID,
                        c_assigned_to: userId
                    };

                    authenticatedAjax({
                        url: 'http://localhost:5245/api/AdminApi/Addtasks',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(taskData),
                        success: function () {
                            $('#addTaskForm')[0].reset();
                            $('#taskDueDate').val(today);
                            toastr.success('Task added successfully');
                            openTasksModal(userId, userName);
                        },
                        error: function (xhr) {
                            toastr.error('Failed to add task');
                            if (xhr.status === 401) window.location.href = '/Auth/Login';
                        }
                    });
                });
            }

            function appendTaskToModal(task) {
                const priorityClass = task.c_priority === 3 ? 'priority-high' : task.c_priority === 2 ? 'priority-medium' : 'priority-low';
                const priorityText = task.c_priority === 3 ? 'High' : task.c_priority === 2 ? 'Medium' : 'Low';
                const statusText = task.c_status === 0 ? 'Pending' : task.c_status === 1 ? 'In Progress' : 'Completed';
                const statusClass = task.c_status === 0 ? 'bg-warning' : task.c_status === 1 ? 'bg-primary' : 'bg-success';
                const dueDate = new Date(task.c_due_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
                const isPastDue = new Date(task.c_due_date) < new Date() && task.c_status !== 2;
                const dueDateClass = isPastDue ? 'text-danger' : '';

                const taskItem = `
                    <div class="task-item ${priorityClass}" data-task-id="${task.c_task_id}">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="mb-0">${task.c_title}</h5>
                            <div>
                                <span class="badge ${statusClass} me-1">${statusText}</span>
                                <span class="badge bg-secondary">${priorityText}</span>
                            </div>
                        </div>
                        <p class="mb-2">${task.c_description}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted ${dueDateClass}">
                                <i class="far fa-calendar-alt me-1"></i> Due: ${dueDate}
                                ${isPastDue ? ' <span class="badge bg-danger">Overdue</span>' : ''}
                            </small>
                            <div class="task-actions">
                                <button class="btn btn-sm btn-outline-primary edit-task" data-task-id="${task.c_task_id}"><i class="fas fa-edit"></i></button>
                                <button class="btn btn-sm btn-outline-danger delete-task" data-task-id="${task.c_task_id}"><i class="fas fa-trash-alt"></i></button>
                            </div>
                        </div>
                    </div>
                `;
                const $taskElement = $(taskItem);
                $taskElement.data('task', task);
                $('#tasksContainer').append($taskElement);
            }

            $(document).on('click', '.edit-task', function () {
                const taskId = $(this).data('task-id');
                const taskElement = $(this).closest('.task-item');
                const task = taskElement.data('task');
                const dueDateISO = new Date(task.c_due_date).toISOString().split('T')[0];

                taskElement.html(`
                    <form class="edit-task-form">
                        <div class="mb-2">
                            <label class="form-label">Title</label>
                            <input type="text" class="form-control" value="${task.c_title}" name="title" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" rows="2" required>${task.c_description}</textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-4 mb-2">
                                <label class="form-label">Status</label>
                                <select class="form-select" name="status">
                                    <option value="0" ${task.c_status === 0 ? 'selected' : ''}>Pending</option>
                                    <option value="1" ${task.c_status === 1 ? 'selected' : ''}>In Progress</option>
                                    <option value="2" ${task.c_status === 2 ? 'selected' : ''}>Completed</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-2">
                                <label class="form-label">Priority</label>
                                <select class="form-select" name="priority">
                                    <option value="1" ${task.c_priority === 1 ? 'selected' : ''}>Low</option>
                                    <option value="2" ${task.c_priority === 2 ? 'selected' : ''}>Medium</option>
                                    <option value="3" ${task.c_priority === 3 ? 'selected' : ''}>High</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-2">
                                <label class="form-label">Due Date</label>
                                <input type="date" class="form-control" value="${dueDateISO}" name="dueDate" required>
                            </div>
                        </div>
                        <div class="text-end">
                            <button type="button" class="btn btn-sm btn-outline-secondary cancel-edit">Cancel</button>
                            <button type="submit" class="btn btn-sm btn-primary ms-2"><i class="fas fa-save me-1"></i> Save</button>
                        </div>
                    </form>
                `);

                taskElement.find('.edit-task-form').on('submit', function (e) {
                    e.preventDefault();
                    const updatedTask = {
                        c_task_id: taskId,
                        c_title: $(this).find('[name="title"]').val(),
                        c_description: $(this).find('[name="description"]').val(),
                        c_status: parseInt($(this).find('[name="status"]').val()),
                        c_priority: parseInt($(this).find('[name="priority"]').val()),
                        c_due_date: new Date($(this).find('[name="dueDate"]').val()).toISOString(),
                        c_created_at: task.c_created_at,
                        c_updated_at: new Date().toISOString(),
                        c_created_by: task.c_created_by,
                        c_assigned_to: task.c_assigned_to
                    };

                    authenticatedAjax({
                        url: `http://localhost:5245/api/AdminApi/${taskId}`,
                        method: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify(updatedTask),
                        success: function () {
                            toastr.success('Task updated successfully');
                            openTasksModal(updatedTask.c_assigned_to, $('#modalUserName').text());
                        },
                        error: function (xhr) {
                            toastr.error('Failed to update task');
                            if (xhr.status === 401) window.location.href = '/Auth/Login';
                        }
                    });
                });

                taskElement.find('.cancel-edit').on('click', () => appendTaskToModal(task));
            });

            $(document).on('click', '.delete-task', function () {
                const taskId = $(this).data('task-id');
                const taskElement = $(this).closest('.task-item');
                const task = taskElement.data('task');

                if (confirm('Are you sure you want to delete this task?')) {
                    authenticatedAjax({
                        url: `http://localhost:5245/api/AdminApi/${taskId}`,
                        method: 'DELETE',
                        success: function () {
                            taskElement.remove();
                            toastr.success('Task deleted successfully');
                            if ($('#tasksContainer').children().length === 0) {
                                $('#tasksContainer').html('<div class="alert alert-info">No tasks assigned to this user yet.</div>');
                            }
                        },
                        error: function (xhr) {
                            toastr.error('Failed to delete task');
                            if (xhr.status === 401) window.location.href = '/Auth/Login';
                        }
                    });
                }
            });

            // User Actions
            $(document).on('click', '#addUserBtn', function () {
                const addUserModal = new bootstrap.Modal(document.getElementById('addUserModal'));
                addUserModal.show();

                $('#addUserForm')[0].reset();
                $('#isActive').prop('checked', true);

                $('#addUserForm').off('submit').on('submit', function (e) {
                    e.preventDefault();
                    const userData = {
                        c_first_name: $('#firstName').val(),
                        c_last_name: $('#lastName').val(),
                        c_email: $('#email').val(),
                        c_password: $('#password').val(),
                        c_role: parseInt($('#role').val()),
                        c_is_active: $('#isActive').is(':checked')
                    };

                    authenticatedAjax({
                        url: 'http://localhost:5245/api/AdminApi/add-user',
                        method: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(userData),
                        success: function () {
                            addUserModal.hide();
                            toastr.success('User added successfully');
                            loadUsers();
                        },
                        error: function (xhr) {
                            toastr.error('Failed to add user');
                            if (xhr.status === 401) window.location.href = '/Auth/Login';
                        }
                    });
                });
            });

            $(document).on('click', '.edit-user', function (e) {
                e.preventDefault();
                const userId = $(this).data('user-id');
                toastr.info(`Edit user ${userId} not implemented yet`);
            });

            $(document).on('click', '.activate-user, .deactivate-user', function (e) {
                e.preventDefault();
                const userId = $(this).data('user-id');
                const isActivate = $(this).hasClass('activate-user');

                authenticatedAjax({
                    url: `http://localhost:5245/api/AdminApi/user/${userId}/status`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify({ c_is_active: isActivate }),
                    success: function () {
                        toastr.success(`User ${isActivate ? 'activated' : 'deactivated'} successfully`);
                        loadUsers();
                    },
                    error: function (xhr) {
                        toastr.error('Failed to update user status');
                        if (xhr.status === 401) window.location.href = '/Auth/Login';
                    }
                });
            });

            $(document).on('click', '.delete-user', function (e) {
                e.preventDefault();
                const userId = $(this).data('user-id');

                if (confirm('Are you sure you want to delete this user?')) {
                    authenticatedAjax({
                        url: `http://localhost:5245/api/AdminApi/${userId}`,
                        method: 'DELETE',
                        success: function () {
                            toastr.success('User deleted successfully');
                            loadUsers();
                        },
                        error: function (xhr) {
                            toastr.error('Failed to delete user');
                            if (xhr.status === 401) window.location.href = '/Auth/Login';
                        }
                    });
                }
            });

            // Chat Event Handlers
            $('#chatIcon').click(function () {
                $('#userListModal').modal('show');
                loadUserList();
            });

            $(document).on('click', '.user-list-item', function () {
                const recipientId = $(this).data('user-id');
                $('#userListModal').modal('hide');
                $('#chatModal').data('recipientId', recipientId);
                $('#chatRecipientName').text(`User ${recipientId}`);
                $('#chatModal').modal('show');
                loadChatHistory(currentUserId, recipientId);
            });

            $('#btnSendMessage').click(function () {
                const recipientId = $('#chatModal').data('recipientId');
                const content = $('#chatInput').val().trim();
                if (!content) {
                    toastr.error('Message cannot be empty');
                    return;
                }

                authenticatedAjax({
                    url: 'http://localhost:5245/api/chat/send',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ senderId: parseInt(currentUserId), recipientId: parseInt(recipientId), content }),
                    success: function (response) {
                        if (response.success) {
                            appendMessageToChat(currentUserId, content, new Date().toISOString(), true);
                            $('#chatInput').val('');
                        } else {
                            toastr.error(response.message || 'Failed to send message');
                        }
                    },
                    error: function (xhr) {
                        toastr.error('Failed to send message');
                        if (xhr.status === 401) window.location.href = '/Auth/Login';
                    }
                });
            });

            // Logout Handlers
            $('#logoutBtnDropdown').click(function (e) {
                e.preventDefault();
                localStorage.removeItem('jwtToken');
                localStorage.removeItem('currentUser');
                window.location.href = '/Auth/Login';
            });

            // Initialize Page
            loadUsers();
            initializeNotifications();
        });
    </script>
</body>
</html>