@using System.Security.Claims
@{
    ViewData["Title"] = "Task Management";
    Layout = "_Layout";
}

<!-- Modern CSS references -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    /* Existing styles remain unchanged */
    /* Adding chat-specific styles */
    .chat-icon {
        position: relative;
        cursor: pointer;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #ffffff;
        border-radius: 50%;
        transition: all 0.2s;
        border: 1px solid var(--border-color);
        color: var(--dark-text);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .chat-icon:hover {
        background-color: var(--light-bg);
        transform: translateY(-2px);
    }

    #chatMessages {
        background-color: var(--light-bg);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    #chatInput {
        resize: none;
    }

    .user-list-item {
        padding: 0.75rem 1.25rem;
        border-bottom: 1px solid var(--border-color);
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .user-list-item:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }

    .user-list-item:last-child {
        border-bottom: none;
    }
</style>

<div class="page-container">
    <div class="dashboard-header">
        <div class="top-header">
            <h1 class="page-title">
                <i class="fas fa-tasks me-2"></i>Task Management
            </h1>
            <div class="d-flex gap-3 align-items-center">
                <button id="btnAddTask" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>New Task
                </button>
                <div class="dropdown">
                    <div class="notification-bell" id="notificationBell">
                        <i class="fas fa-bell"></i>
                        <span class="notification-count" id="unreadCount">0</span>
                    </div>
                    <div class="dropdown-menu dropdown-menu-end notification-dropdown" id="notificationDropdown">
                        <div class="notification-header">
                            <span>Notifications</span>
                            <a href="#" class="text-primary small" id="markAllRead">Mark all as read</a>
                        </div>
                        <div id="notificationList"></div>
                    </div>
                </div>
                <div class="chat-icon" id="chatIcon">
                    <i class="fas fa-comments"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Task List Card -->
    <div class="dashboard-card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">My Tasks</h5>
            <div class="search-wrapper" style="width: 250px;">
                <i class="fas fa-search search-icon"></i>
                <div class="d-flex gap-2">
                    <select id="creatorFilter" class="form-select" style="width: auto;">
                        <option value="all">All Tasks</option>
                        <option value="admin">Admin Tasks</option>
                        <option value="my">My Tasks</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table id="taskTable" class="table">
                    <thead>
                        <tr>
                            <th style="width: 60px;">ID</th>
                            <th>Title</th>
                            <th>Description</th>
                            <th style="width: 120px;">Status</th>
                            <th style="width: 150px;">Due Date</th>
                            <th style="width: 120px;">Priority</th>
                            <th style="width: 120px;">Actions</th> <!-- Reverted to original width -->
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div id="taskLoadingIndicator" class="text-center py-4" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading your tasks...</p>
            </div>
            <div id="noTasksMessage" class="empty-state" style="display: none;">
                <i class="fas fa-clipboard-list"></i>
                <h5>No Tasks Found</h5>
                <p class="text-muted">Create a new task to get started</p>
                <button id="btnEmptyStateAddTask" class="btn btn-primary mt-2">
                    <i class="fas fa-plus me-2"></i>Add Your First Task
                </button>
            </div>
        </div>
    </div>

    <!-- User List Modal -->
    <div class="modal fade" id="userListModal" tabindex="-1" aria-labelledby="userListModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="userListModalLabel">Select a User to Chat</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="userList" style="max-height: 400px; overflow-y: auto;">
                    <!-- User list will be populated here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Chat Modal -->
    <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="chatModalLabel">Chat with <span id="chatRecipientName"></span></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="chatMessages" style="height: 300px; overflow-y: auto;"></div>
                    <textarea id="chatInput" class="form-control mt-2" rows="2" placeholder="Type a message..."></textarea>
                    <button id="btnSendMessage" class="btn btn-primary mt-2">
                        <i class="fas fa-paper-plane me-2"></i>Send
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Task Modal -->
    <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="taskModalLabel">Add New Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="taskForm">
                        <input type="hidden" id="taskId" name="c_task_id" value="0">
                        <div class="mb-3">
                            <label for="taskTitle" class="form-label">Title</label>
                            <input type="text" class="form-control" id="taskTitle" name="c_title" required placeholder="Enter task title">
                        </div>
                        <div class="mb-3">
                            <label for="taskDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="taskDescription" name="c_description" rows="3" placeholder="Enter task description"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="taskStatus" class="form-label">Status</label>
                                <select class="form-select" id="taskStatus" name="c_status">
                                    <option value="0">New</option>
                                    <option value="1">In Progress</option>
                                    <option value="2">Completed</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="taskPriority" class="form-label">Priority</label>
                                <select class="form-select" id="taskPriority" name="c_priority">
                                    <option value="1">Low</option>
                                    <option value="2">Medium</option>
                                    <option value="3">High</option>
                                    <option value="4">Urgent</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="taskDueDate" class="form-label">Due Date</label>
                            <input type="datetime-local" class="form-control" id="taskDueDate" name="c_due_date">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="btnSaveTask" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Task
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="mb-3">
                        <i class="fas fa-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                    </div>
                    <p>Are you sure you want to delete this task?</p>
                    <p class="text-danger small">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="btnConfirmDelete" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
  $(document).ready(function () {
    // Core app state and constants
    const currentUser = JSON.parse(localStorage.getItem('currentUser')) || {};
    const currentUserId = currentUser.userId || 0;
    const API_BASE_URL = 'http://localhost:5245';
    
    // SignalR hub URLs
    const NOTIFICATION_HUB_URL = `${API_BASE_URL}/notificationHub`;
    const CHAT_HUB_URL = `${API_BASE_URL}/chatHub`;
    
    // UI element references
    const UI = {
        taskTable: $('#taskTable tbody'),
        taskLoadingIndicator: $('#taskLoadingIndicator'),
        noTasksMessage: $('#noTasksMessage'),
        notificationList: $('#notificationList'),
        unreadCount: $('#unreadCount'),
        notificationDropdown: $('#notificationDropdown'),
        chatMessages: $('#chatMessages'),
        chatInput: $('#chatInput')
    };
    
    // Toast configuration
    toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: "toast-top-right",
        timeOut: 5000
    };
    
    // ===== Authentication Functions =====
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
        return null;
    }
    
    function getAuthToken() {
        const localToken = localStorage.getItem('jwtToken');
        return localToken || getCookie('jwtToken');
    }
    
    function authenticatedAjax(options) {
        const token = getAuthToken();
        const defaults = {
            headers: { 'Authorization': 'Bearer ' + token },
            error: function(xhr) {
                if (xhr.status === 401) {
                    toastr.error("Your session has expired. Redirecting to login...");
                    setTimeout(() => window.location.href = '/Auth/Login', 2000);
                }
            }
        };
        return $.ajax({ ...defaults, ...options });
    }
    
    // ===== SignalR Connection Management =====
    // Initialize connection objects
    const notificationConnection = new signalR.HubConnectionBuilder()
        .withUrl(NOTIFICATION_HUB_URL, {
            accessTokenFactory: getAuthToken,
            transport: signalR.HttpTransportType.WebSockets
        })
        .configureLogging(signalR.LogLevel.Information)
        .withAutomaticReconnect([0, 2000, 5000, 10000, 30000]) // Reconnection timing strategy
        .build();
        
    const chatConnection = new signalR.HubConnectionBuilder()
        .withUrl(CHAT_HUB_URL, {
            accessTokenFactory: getAuthToken,
            transport: signalR.HttpTransportType.WebSockets
        })
        .configureLogging(signalR.LogLevel.Information)
        .withAutomaticReconnect([0, 2000, 5000, 10000, 30000])
        .build();
    
    // Connection status event handlers
    function addConnectionStatusHandlers(connection, name) {
        connection.onreconnecting(error => {
            console.log(`${name} connection reconnecting:`, error);
            toastr.warning(`Reconnecting to ${name.toLowerCase()} service...`);
        });
        
        connection.onreconnected(connectionId => {
            console.log(`${name} connection reconnected. ID:`, connectionId);
            toastr.success(`Reconnected to ${name.toLowerCase()} service`);
            
            // Re-register to appropriate groups
            if (name === 'Notification') {
                connection.invoke("JoinUserGroup").catch(err => console.error("Failed to rejoin user group:", err));
            } else if (name === 'Chat') {
                connection.invoke("JoinChat", currentUserId.toString()).catch(err => console.error("Failed to rejoin chat:", err));
            }
        });
        
        connection.onclose(error => {
            console.log(`${name} connection closed:`, error);
            toastr.error(`Disconnected from ${name.toLowerCase()} service. Attempting to reconnect...`);
            
            // Try manual reconnection after a delay
            setTimeout(() => {
                startConnection(connection, name);
            }, 5000);
        });
    }
    
    function startConnection(connection, name) {
        console.log(`Starting ${name} connection...`);
        
        return connection.start()
            .then(() => {
                console.log(`${name} connection established successfully`);
                
                // Join appropriate groups/channels
                if (name === 'Notification') {
                    return connection.invoke("JoinUserGroup");
                } else if (name === 'Chat') {
                    return connection.invoke("JoinChat", currentUserId.toString());
                }
            })
            .then(() => {
                console.log(`Joined ${name.toLowerCase()} groups/channels`);
            })
            .catch(err => {
                console.error(`Error starting ${name} connection:`, err);
                toastr.error(`Failed to connect to ${name.toLowerCase()} service. Retrying...`);
                
                // Retry after delay
                setTimeout(() => {
                    startConnection(connection, name);
                }, 5000);
            });
    }
    
    // ===== Notification System =====
    function setupNotificationHandlers() {
        // Register event handlers before starting connection
        notificationConnection.on("ReceiveNotification", (data) => {
            console.log("Notification received:", data);
            updateNotificationUI(data);
        });
        
        notificationConnection.on("NotificationMarkedAsRead", (notificationId) => {
            console.log("Notification marked as read:", notificationId);
            updateNotificationReadStatus(notificationId);
        });
        
        notificationConnection.on("AllNotificationsMarkedAsRead", () => {
            console.log("All notifications marked as read");
            UI.notificationList.html('<div class="p-3 text-center text-muted">No unread notifications</div>');
            UI.unreadCount.text(0).hide();
        });
        
        // Add connection status handlers
        addConnectionStatusHandlers(notificationConnection, 'Notification');
    }
    
    function updateNotificationUI(data) {
        const notifications = data.notifications || [];
        const unreadCount = data.count || 0;
        
        UI.notificationList.empty();
        
        if (notifications.length > 0) {
            notifications.forEach(notification => appendNotificationToDropdown(notification));
            UI.unreadCount.text(unreadCount).toggle(unreadCount > 0);
        } else {
            UI.notificationList.html('<div class="p-3 text-center text-muted">No notifications</div>');
            UI.unreadCount.hide();
        }
    }
    
    function updateNotificationReadStatus(notificationId) {
        const $item = $(`[data-notification-id="${notificationId}"]`);
        $item.removeClass("unread").find(".notification-message").removeClass("fw-bold");
        $item.find(".mark-as-read").remove();
        
        // Update unread count
        const unreadCount = $('.notification-item.unread').length;
        UI.unreadCount.text(unreadCount).toggle(unreadCount > 0);
    }
    
    function appendNotificationToDropdown(notification) {
        const date = new Date(notification.c_created_at).toLocaleString('en-US', {
            month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true
        });
        const unreadClass = notification.c_is_read ? '' : 'unread';
        const boldClass = notification.c_is_read ? '' : 'fw-bold';
        
        const item = `
            <div class="notification-item ${unreadClass}" data-notification-id="${notification.c_notification_id}">
                <div class="notification-message ${boldClass}">${notification.c_message}</div>
                <div class="notification-time">${date}</div>
                ${!notification.c_is_read ? `
                    <button class="btn btn-sm btn-outline-primary mark-as-read" data-notification-id="${notification.c_notification_id}">
                        Mark as Read
                    </button>
                ` : ''}
            </div>
        `;
        
        UI.notificationList.append(item);
    }
    
    function loadNotifications() {
        console.log("Loading notifications...");
        
        authenticatedAjax({
            url: `${API_BASE_URL}/api/User/my-notifications`,
            method: 'GET',
            success: function(response) {
                console.log("Notifications loaded:", response);
                const notifications = response.notifications || [];
                UI.notificationList.empty();
                
                if (notifications.length > 0) {
                    let unreadCount = 0;
                    notifications.forEach(n => {
                        if (!n.c_is_read) unreadCount++;
                        appendNotificationToDropdown(n);
                    });
                    UI.unreadCount.text(unreadCount).toggle(unreadCount > 0);
                } else {
                    UI.notificationList.html('<div class="p-3 text-center text-muted">No notifications</div>');
                    UI.unreadCount.hide();
                }
            },
            error: function(xhr) {
                if (xhr.status !== 401) {
                    UI.notificationList.html('<div class="p-3 text-center text-danger">Failed to load notifications</div>');
                    console.error("Failed to load notifications:", xhr);
                }
            }
        });
    }
    
    function initializeNotificationSystem() {
        // Setup notification events
        setupNotificationHandlers();
        
        // Notification bell click handler
        $('#notificationBell').click(function(e) {
            e.preventDefault();
            e.stopPropagation();
            UI.notificationDropdown.toggleClass('show');
            
            // Load notifications when dropdown is opened
            if (UI.notificationDropdown.hasClass('show')) {
                loadNotifications();
            }
        });
        
        // Close notification dropdown when clicking elsewhere
        $(document).on('click', function(e) {
            if (!$(e.target).closest('#notificationDropdown, #notificationBell').length) {
                UI.notificationDropdown.removeClass('show');
            }
        });
        
        // Mark all as read handler
        $('#markAllRead').click(function(e) {
            e.preventDefault();
            notificationConnection.invoke("MarkAllNotificationsAsRead")
                .catch(err => {
                    console.error("Error marking all notifications as read:", err);
                    toastr.error("Failed to mark notifications as read");
                });
        });
        
        // Individual mark as read handler
        $(document).on('click', '.mark-as-read', function() {
            const notificationId = parseInt($(this).data('notification-id'));
            notificationConnection.invoke("MarkNotificationAsRead", notificationId)
                .catch(err => {
                    console.error("Error marking notification as read:", err);
                    toastr.error("Failed to mark notification as read");
                });
        });
        
        // Start notification connection
        startConnection(notificationConnection, 'Notification');
        
        // Initial load and periodic refresh of notifications
        loadNotifications();
        setInterval(loadNotifications, 60000); // Refresh every minute as backup
    }
    
    // ===== Chat System =====
    function setupChatHandlers() {
        chatConnection.on("ReceiveMessage", (senderId, content, timestamp) => {
            console.log("Message received from:", senderId);
            
            // Convert IDs to integers for proper comparison
            senderId = parseInt(senderId);
            const currentRecipientId = parseInt($('#chatModal').data('recipientId') || 0);
            
            // Check if we should show the message in the current chat
            if ($('#chatModal').is(':visible') && senderId === currentRecipientId) {
                appendMessageToChat(senderId, content, timestamp, false);
                UI.chatMessages.scrollTop(UI.chatMessages[0].scrollHeight);
            } else {
                // Notification for message from someone we're not currently chatting with
                toastr.info(`New message from User ${senderId}`, null, {
                    onclick: function() {
                        // Open chat with this user when notification is clicked
                        $('#chatModal').modal('hide');
                        openChatWithUser(senderId);
                    }
                });
            }
        });
        
        // Add connection status handlers
        addConnectionStatusHandlers(chatConnection, 'Chat');
    }
    
    function loadUserList() {
        authenticatedAjax({
            url: `${API_BASE_URL}/api/User/users`,
            type: 'GET',
            success: function(users) {
                $('#userList').empty();
                
                if (users && users.length > 0) {
                    users.forEach(user => {
                        if (user.c_user_id != currentUserId) { // Exclude current user
                            const item = `
                                <div class="user-list-item" data-user-id="${user.c_user_id}" data-username="${user.c_username}">
                                    <i class="fas fa-user me-2"></i>${user.c_username} (User ${user.c_user_id})
                                </div>
                            `;
                            $('#userList').append(item);
                        }
                    });
                } else {
                    $('#userList').html('<div class="p-3 text-center text-muted">No users found</div>');
                }
            },
            error: function(xhr) {
                if (xhr.status !== 401) {
                    $('#userList').html('<div class="p-3 text-center text-danger">Failed to load users</div>');
                    console.error("Failed to load users:", xhr);
                }
            }
        });
    }
    
    function appendMessageToChat(senderId, content, timestamp, isSent) {
        const date = new Date(timestamp).toLocaleString('en-US', {
            hour: 'numeric', minute: 'numeric', second: 'numeric', hour12: true
        });
        
        const messageClass = isSent ? 'text-end text-primary' : 'text-start text-secondary';
        const message = `
            <div class="${messageClass} mb-2">
                <div class="badge ${isSent ? 'bg-primary' : 'bg-secondary'} text-white p-2">
                    ${content}
                </div>
                <div class="small text-muted mt-1">${date}</div>
            </div>
        `;
        
        UI.chatMessages.append(message);
        UI.chatMessages.scrollTop(UI.chatMessages[0].scrollHeight);
    }
    
    function loadChatHistory(senderId, recipientId) {
        UI.chatMessages.html(
            `<div class="text-center p-3">
                <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                <p class="mt-2 text-muted">Loading messages...</p>
            </div>`
        );
        
        authenticatedAjax({
            url: `${API_BASE_URL}/api/chat/history/${senderId}/${recipientId}`,
            type: 'GET',
            success: function(history) {
                UI.chatMessages.empty();
                
                if (history && history.length > 0) {
                    history.forEach(msg => {
                        appendMessageToChat(
                            msg.c_sender_id, 
                            msg.c_content, 
                            msg.c_timestamp, 
                            msg.c_sender_id == currentUserId
                        );
                    });
                } else {
                    UI.chatMessages.html('<div class="text-center p-3 text-muted">No messages yet</div>');
                }
            },
            error: function(xhr) {
                if (xhr.status !== 401) {
                    UI.chatMessages.html('<div class="text-center p-3 text-danger">Failed to load chat history</div>');
                    console.error("Failed to load chat history:", xhr);
                }
            }
        });
    }
    
    function sendChatMessage() {
        const recipientId = parseInt($('#chatModal').data('recipientId'));
        const content = UI.chatInput.val().trim();
        
        if (!content) {
            toastr.error('Message cannot be empty');
            return;
        }
        
        // Disable input while sending
        UI.chatInput.prop('disabled', true);
        $('#btnSendMessage').prop('disabled', true).html(
            '<span class="spinner-border spinner-border-sm" role="status"></span> Sending...'
        );
        
        authenticatedAjax({
            url: `${API_BASE_URL}/api/chat/send`,
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ 
                senderId: parseInt(currentUserId), 
                recipientId: recipientId, 
                content: content 
            }),
            success: function(response) {
                if (response.success) {
                    appendMessageToChat(currentUserId, content, new Date().toISOString(), true);
                    UI.chatInput.val('');
                } else {
                    toastr.error(response.message || 'Failed to send message');
                }
            },
            error: function(xhr) {
                if (xhr.status !== 401) {
                    toastr.error('Failed to send message');
                    console.error("Failed to send message:", xhr);
                }
            },
            complete: function() {
                // Re-enable input
                UI.chatInput.prop('disabled', false).focus();
                $('#btnSendMessage').prop('disabled', false).html(
                    '<i class="fas fa-paper-plane me-2"></i>Send'
                );
            }
        });
    }
    
    function openChatWithUser(userId) {
        $('#userListModal').modal('hide');
        
        // Get user info if available
        const userItem = $(`.user-list-item[data-user-id="${userId}"]`);
        const username = userItem.length > 0 ? userItem.data('username') : `User ${userId}`;
        
        $('#chatModal').data('recipientId', userId);
        $('#chatRecipientName').text(username);
        $('#chatModal').modal('show');
        
        loadChatHistory(currentUserId, userId);
    }
    
    function initializeChatSystem() {
        // Setup chat event handlers
        setupChatHandlers();
        
        // Chat icon click handler
        $('#chatIcon').click(function() {
            $('#userListModal').modal('show');
            loadUserList();
        });
        
        // User selection handler
        $(document).on('click', '.user-list-item', function() {
            const recipientId = $(this).data('user-id');
            openChatWithUser(recipientId);
        });
        
        // Send message handler
        $('#btnSendMessage').click(function() {
            sendChatMessage();
        });
        
        // Enter key in chat input
        UI.chatInput.on('keypress', function(e) {
            if (e.which === 13 && !e.shiftKey) {
                e.preventDefault();
                sendChatMessage();
            }
        });
        
        // Start chat connection
        startConnection(chatConnection, 'Chat');
    }
    
    // ===== Task Management =====
    function loadTasks(filterType = 'all') {
        UI.taskLoadingIndicator.show();
        UI.taskTable.empty();
        UI.noTasksMessage.hide();
        
        authenticatedAjax({
            url: `${API_BASE_URL}/api/User/GetAllTasks`,
            type: 'GET',
            success: function(data) {
                UI.taskLoadingIndicator.hide();
                
                if (data && data.length > 0) {
                    const filteredData = data.filter(task => {
                        if (filterType === 'all') return true;
                        if (filterType === 'admin') return task.c_created_by === 1;
                        if (filterType === 'my') return task.c_created_by === parseInt(currentUserId);
                        return true;
                    });
                    
                    if (filteredData.length > 0) {
                        filteredData.forEach(appendTaskToTable);
                        UI.noTasksMessage.hide();
                    } else {
                        UI.noTasksMessage.show();
                    }
                } else {
                    UI.noTasksMessage.show();
                }
            },
            error: function(xhr) {
                UI.taskLoadingIndicator.hide();
                UI.noTasksMessage.show();
                
                if (xhr.status !== 401) {
                    toastr.error('Failed to load tasks');
                    console.error("Failed to load tasks:", xhr);
                }
            }
        });
    }
    
    function appendTaskToTable(task) {
        const dueDate = task.c_due_date ? new Date(task.c_due_date).toLocaleString() : 'N/A';
        
        const statusMap = {
            0: { text: 'New', class: 'badge-new' },
            1: { text: 'In Progress', class: 'badge-in-progress' },
            2: { text: 'Completed', class: 'badge-completed' }
        };
        const status = statusMap[task.c_status] || { text: 'Unknown', class: 'bg-secondary' };
        
        const priorityMap = {
            1: { text: 'Low', class: 'bg-info' },
            2: { text: 'Medium', class: 'bg-primary' },
            3: { text: 'High', class: 'bg-warning' },
            4: { text: 'Urgent', class: 'bg-danger' }
        };
        const priority = priorityMap[task.c_priority] || { text: 'Medium', class: 'bg-primary' };
        
        const row = `
            <tr data-task-id="${task.c_task_id}">
                <td>${task.c_task_id}</td>
                <td class="fw-medium">${task.c_title}</td>
                <td><div class="text-wrap" style="max-width: 250px;">${task.c_description || 'N/A'}</div></td>
                <td><span class="badge ${status.class}">${status.text}</span></td>
                <td><i class="far fa-calendar-alt me-2"></i>${dueDate}</td>
                <td><span class="badge ${priority.class}">${priority.text}</span></td>
                <td>
                    <div class="d-flex gap-2">
                        <button class="btn btn-sm btn-primary btn-edit" data-task-id="${task.c_task_id}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger btn-delete" data-task-id="${task.c_task_id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
        
        UI.taskTable.append(row);
    }
    
    function getTaskById(taskId) {
        UI.taskLoadingIndicator.show();
        
        authenticatedAjax({
            url: `${API_BASE_URL}/api/User/${taskId}`,
            type: 'GET',
            success: function(task) {
                UI.taskLoadingIndicator.hide();
                
                if (task) {
                    $('#taskId').val(task.c_task_id);
                    $('#taskTitle').val(task.c_title);
                    $('#taskDescription').val(task.c_description);
                    $('#taskStatus').val(task.c_status);
                    $('#taskPriority').val(task.c_priority);
                    
                    if (task.c_due_date) {
                        const dueDate = new Date(task.c_due_date);
                        $('#taskDueDate').val(dueDate.toISOString().slice(0, 16));
                    }
                    
                    $('#taskModalLabel').text('Edit Task');
                    $('#taskModal').modal('show');
                } else {
                    toastr.error('Task not found');
                }
            },
            error: function(xhr) {
                UI.taskLoadingIndicator.hide();
                
                if (xhr.status !== 401) {
                    toastr.error('Failed to load task details');
                    console.error("Failed to load task details:", xhr);
                }
            }
        });
    }
    
    function saveTask() {
        const taskId = parseInt($('#taskId').val());
        const isNewTask = taskId === 0;
        
        const task = {
            c_task_id: taskId,
            c_title: $('#taskTitle').val(),
            c_description: $('#taskDescription').val(),
            c_status: parseInt($('#taskStatus').val()),
            c_priority: parseInt($('#taskPriority').val()),
            c_due_date: $('#taskDueDate').val(),
            c_created_by: currentUserId,
            c_assigned_to: currentUserId
        };
        
        if (!task.c_title) {
            toastr.warning('Please enter a task title');
            return;
        }
        
        $('#btnSaveTask').prop('disabled', true).html(
            '<span class="spinner-border spinner-border-sm" role="status"></span> Saving...'
        );
        
        const url = isNewTask 
            ? `${API_BASE_URL}/api/User/AddTask` 
            : `${API_BASE_URL}/api/User/UpdateTask/${taskId}`;
            
        authenticatedAjax({
            url: url,
            type: isNewTask ? 'POST' : 'PUT',
            contentType: 'application/json',
            data: JSON.stringify(task),
            success: function() {
                $('#taskModal').modal('hide');
                toastr.success(isNewTask ? 'Task created successfully!' : 'Task updated successfully!');
                loadTasks($('#creatorFilter').val());
            },
            error: function(xhr) {
                if (xhr.status !== 401) {
                    toastr.error('Failed to save task');
                    console.error("Failed to save task:", xhr);
                }
            },
            complete: function() {
                $('#btnSaveTask').prop('disabled', false).html('<i class="fas fa-save me-2"></i>Save Task');
            }
        });
    }
    
    function deleteTask(taskId) {
        authenticatedAjax({
            url: `${API_BASE_URL}/api/User/${taskId}`,
            type: 'DELETE',
            success: function() {
                $('#deleteConfirmationModal').modal('hide');
                toastr.success('Task deleted successfully!');
                loadTasks($('#creatorFilter').val());
            },
            error: function(xhr) {
                if (xhr.status !== 401) {
                    toastr.error('Failed to delete task');
                    console.error("Failed to delete task:", xhr);
                }
                $('#deleteConfirmationModal').modal('hide');
            }
        });
    }
    
    function resetTaskForm() {
        $('#taskId').val(0);
        $('#taskTitle').val('');
        $('#taskDescription').val('');
        $('#taskStatus').val(0);
        $('#taskPriority').val(2);
        
        const defaultDueDate = new Date();
        defaultDueDate.setDate(defaultDueDate.getDate() + 7);
        $('#taskDueDate').val(defaultDueDate.toISOString().slice(0, 16));
    }
    
    function initializeTaskSystem() {
        // Load tasks on filter change
        $('#creatorFilter').on('change', function() {
            loadTasks($(this).val());
        });
        
        // Add task button handlers
        $('#btnAddTask, #btnEmptyStateAddTask').click(function() {
            resetTaskForm();
            $('#taskModalLabel').text('Add New Task');
            $('#taskModal').modal('show');
        });
        
        // Edit task button handler
        $(document).on('click', '.btn-edit', function() {
            const taskId = $(this).data('task-id');
            getTaskById(taskId);
        });
        
        // Delete task button handler
        let taskToDeleteId = null;
        $(document).on('click', '.btn-delete', function() {
            taskToDeleteId = $(this).data('task-id');
            $('#deleteConfirmationModal').modal('show');
        });
        
        // Confirm delete handler
        $('#btnConfirmDelete').click(function() {
            if (taskToDeleteId) deleteTask(taskToDeleteId);
        });
        
        // Save task handler
        $('#btnSaveTask').click(function() {
            saveTask();
        });
        
        // Initial task load
        loadTasks();
    }
    
    // ===== Utility Functions =====
    function debounce(func, wait) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
    
    // ===== Initialize Application =====
    function initializeApp() {
        // Check authentication
        if (!getAuthToken()) {
            toastr.error("You are not logged in. Redirecting to login...");
            setTimeout(() => window.location.href = '/Auth/Login', 2000);
            return;
        }
        
        // Initialize all subsystems
        initializeNotificationSystem();
        initializeChatSystem();
        initializeTaskSystem();
        
        console.log("Application initialized");
    }
    
    // Start the application
    initializeApp();
});
    </script>
}