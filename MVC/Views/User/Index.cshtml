@using System.Security.Claims
@{
    ViewData["Title"] = "Task Management";
    Layout = "_Layout";
}

<!-- Modern CSS references -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    :root {
        --primary-color: #4361ee;
        --primary-hover: #3a56d4;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --light-bg: #f8f9fa;
        --dark-text: #2b2d42;
        --light-text: #8d99ae;
        --border-color: #e9ecef;
        --danger-color: #ef476f;
        --warning-color: #ffd166;
        --success-color: #06d6a0;
        --info-color: #118ab2;
        --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    body {
        background-color: #f5f7fa;
        font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
        color: var(--dark-text);
        get
    }

    .page-container {
        padding: 1.5rem;
    }

    .dashboard-header {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: var(--card-shadow);
    }

    .dashboard-card {
        background: white;
        border-radius: 12px;
        box-shadow: var(--card-shadow);
        border: none;
        transition: transform 0.2s ease;
    }

    .dashboard-card:hover {
        transform: translateY(-2px);
    }

    .card-header {
        background: none;
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid var(--border-color);
        font-weight: 600;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        border-radius: 8px;
        padding: 0.5rem 1.25rem;
        font-weight: 500;
        transition: all 0.2s;
    }

    .btn-primary:hover {
        background-color: var(--primary-hover);
        border-color: var(--primary-hover);
        box-shadow: 0 4px 12px rgba(67, 97, 238, 0.3);
    }

    .btn-secondary {
        background-color: #e9ecef;
        border-color: #e9ecef;
        color: var(--dark-text);
        border-radius: 8px;
        font-weight: 500;
    }

    .btn-danger {
        background-color: var(--danger-color);
        border-color: var(--danger-color);
        border-radius: 8px;
        font-weight: 500;
    }

    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        border-radius: 6px;
    }

    .btn-action {
        width: 34px;
        height: 34px;
        padding: 0;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
    }

    .top-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 0;
        color: var (--dark-text);
    }

    /* Modern table styling */
    .table {
        margin-bottom: 0;
    }

    .table thead th {
        background-color: rgba(0, 0, 0, 0.01);
        font-weight: 600;
        color: var(--dark-text);
        border-bottom: 1px solid var(--border-color);
        padding: 1rem 1.5rem;
    }

    .table tbody td {
        padding: 1rem 1.5rem;
        vertical-align: middle;
        border-bottom: 1px solid var(--border-color);
        color: var(--dark-text);
    }

    .table tr:last-child td {
        border-bottom: none;
    }

    .status-badge {
        padding: 0.375rem 0.75rem;
        border-radius: 50rem;
        font-size: 0.75rem;
        font-weight: 500;
    }

    /* Form Controls */
    .form-control,
    .form-select {
        padding: 0.675rem 1rem;
        font-size: 0.95rem;
        border-radius: 8px;
        border-color: var(--border-color);
        box-shadow: none;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: var(--accent-color);
        box-shadow: 0 0 0 0.25rem rgba(72, 149, 239, 0.15);
    }

    .form-label {
        font-weight: 500;
        color: var(--dark-text);
        margin-bottom: 0.5rem;
    }

    /* Modal styling */
    .modal-content {
        border-radius: 12px;
        border: none;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        border-bottom: 1px solid var(--border-color);
        padding: 1.25rem 1.5rem;
    }

    .modal-footer {
        border-top: 1px solid var(--border-color);
        padding: 1.25rem 1.5rem;
    }

    .modal-title {
        font-weight: 600;
    }

    /* Search box */
    .search-wrapper {
        position: relative;
    }

    .search-wrapper .form-control {
        padding-left: 2.5rem;
        height: 42px;
    }

    .search-icon {
        position: absolute;
        left: 0.875rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--light-text);
    }

    /* Notification styles */
    .notification-bell {
        position: relative;
        cursor: pointer;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #ffffff;
        border-radius: 50%;
        transition: all 0.2s;
        border: 1px solid var(--border-color);
        color: var(--dark-text);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .notification-bell:hover {
        background-color: var(--light-bg);
        transform: translateY(-2px);
    }

    .notification-count {
        position: absolute;
        top: -6px;
        right: -6px;
        font-size: 10px;
        font-weight: 600;
        padding: 2px 5px;
        background-color: var(--danger-color);
        color: white;
        border-radius: 12px;
        min-width: 18px;
        height: 18px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid white;
    }

    .notification-dropdown {
        width: 320px;
        padding: 0;
        border-radius: 12px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        border: none;
        overflow: hidden;
        margin-top: 1rem;
    }

    .notification-header {
        padding: 1rem 1.25rem;
        font-weight: 600;
        border-bottom: 1px solid var(--border-color);
        background-color: #f8f9fa;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .notification-item {
        padding: 1rem 1.25rem;
        border-bottom: 1px solid var(--border-color);
        transition: background-color 0.2s;
    }

    .notification-item:last-child {
        border-bottom: none;
    }

    .notification-item.unread {
        background-color: rgba(67, 97, 238, 0.05);
    }

    .notification-item:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }

    .notification-message {
        margin-bottom: 0.5rem;
    }

    .notification-time {
        font-size: 0.8rem;
        color: var(--light-text);
        margin-bottom: 0.5rem;
    }

    .mark-as-read {
        padding: 0.25rem 0.75rem;
        font-size: 0.75rem;
    }

    /* Task priority and status badges */
    .badge {
        padding: 0.375rem 0.75rem;
        border-radius: 50rem;
        font-weight: 500;
        font-size: 0.75rem;
    }

    .badge-new {
        background-color: var(--info-color);
        color: white;
    }

    .badge-in-progress {
        background-color: var(--warning-color);
        color: #664d00;
    }

    .badge-completed {
        background-color: var (--success-color);
        color: white;
    }

    /* Empty state */
    .empty-state {
        text-align: center;
        padding: 3rem 1.5rem;
        color: var(--light-text);
    }

    .empty-state i {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    /* Utility classes */
    .icon-button {
        background: none;
        border: none;
        cursor: pointer;
        color: var(--light-text);
        transition: all 0.2s;
    }

    .icon-button:hover {
        color: var(--dark-text);
    }
</style>

<div class="page-container">
    <div class="dashboard-header">
        <div class="top-header">
            <h1 class="page-title">
                <i class="fas fa-tasks me-2"></i>Task Management
            </h1>
            <div class="d-flex gap-3 align-items-center">
                <button id="btnAddTask" class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>New Task
                </button>
                <div class="dropdown">
                    <div class="notification-bell" id="notificationBell">
                        <i class="fas fa-bell"></i>
                        <span class="notification-count" id="unreadCount">0</span>
                    </div>
                    <div class="dropdown-menu dropdown-menu-end notification-dropdown" id="notificationDropdown">
                        <div class="notification-header">
                            <span>Notifications</span>
                            <a href="#" class="text-primary small" id="markAllRead">Mark all as read</a>
                        </div>
                        <div id="notificationList"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Task List Card -->
    <div class="dashboard-card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">My Tasks</h5>
            <div class="search-wrapper" style="width: 250px;">
                <i class="fas fa-search search-icon"></i>
                <div class="d-flex gap-2">
                    <select id="creatorFilter" class="form-select" style="width: auto;">
                        <option value="all">All Tasks</option>
                        <option value="admin">Admin Tasks</option>
                        <option value="my">My Tasks</option>
                    </select>

                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table id="taskTable" class="table">
                    <thead>
                        <tr>
                            <th style="width: 60px;">ID</th>
                            <th>Title</th>
                            <th>Description</th>
                            <th style="width: 120px;">Status</th>
                            <th style="width: 150px;">Due Date</th>
                            <th style="width: 120px;">Priority</th>
                            <th style="width: 120px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Tasks will be loaded here -->
                    </tbody>
                </table>
            </div>
            <div id="taskLoadingIndicator" class="text-center py-4" style="display: none;">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading your tasks...</p>
            </div>
            <div id="noTasksMessage" class="empty-state" style="display: none;">
                <i class="fas fa-clipboard-list"></i>
                <h5>No Tasks Found</h5>
                <p class="text-muted">Create a new task to get started</p>
                <button id="btnEmptyStateAddTask" class="btn btn-primary mt-2">
                    <i class="fas fa-plus me-2"></i>Add Your First Task
                </button>
            </div>
        </div>
    </div>

    <!-- Task Modal -->
    <div class="modal fade" id="taskModal" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="taskModalLabel">Add New Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="taskForm">
                        <input type="hidden" id="taskId" name="c_task_id" value="0">

                        <div class="mb-3">
                            <label for="taskTitle" class="form-label">Title</label>
                            <input type="text" class="form-control" id="taskTitle" name="c_title" required
                                placeholder="Enter task title">
                        </div>

                        <div class="mb-3">
                            <label for="taskDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="taskDescription" name="c_description" rows="3"
                                placeholder="Enter task description"></textarea>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="taskStatus" class="form-label">Status</label>
                                <select class="form-select" id="taskStatus" name="c_status">
                                    <option value="0">New</option>
                                    <option value="1">In Progress</option>
                                    <option value="2">Completed</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="taskPriority" class="form-label">Priority</label>
                                <select class="form-select" id="taskPriority" name="c_priority">
                                    <option value="1">Low</option>
                                    <option value="2">Medium</option>
                                    <option value="3">High</option>
                                    <option value="4">Urgent</option>
                                </select>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="taskDueDate" class="form-label">Due Date</label>
                            <input type="datetime-local" class="form-control" id="taskDueDate" name="c_due_date">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="btnSaveTask" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Task
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteConfirmationModalLabel">Delete Task</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <div class="mb-3">
                        <i class="fas fa-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
                    </div>
                    <p>Are you sure you want to delete this task?</p>
                    <p class="text-danger small">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="btnConfirmDelete" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        $(document).ready(function () {

            const currentUser = JSON.parse(localStorage.getItem('currentUser')) || {};
            const currentUserId = currentUser.userId || 0;
           const token = getAuthToken();
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("http://localhost:5245/notificationHub", {
                    accessTokenFactory: () => getAuthToken(),
                    transport: signalR.HttpTransportType.WebSockets // Try WebSockets first
                })
                .configureLogging(signalR.LogLevel.Debug) // Detailed logs
                .withAutomaticReconnect() // Handle disconnects
                .build();

            connection.start()
                .then(() => {
                    console.log("SignalR Connected!");
                    return connection.invoke("JoinUserGroup"); // No userId parameter
                })
                .catch(err => console.error("SignalR Connection Error:", err));
      
            connection.onclose((error) => {
            console.error("SignalR Connection Closed:", error);
        });

            // Debounce utility
            function debounce(func, wait) {
                let timeout;
                return function (...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            // Notification Functions
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return null;
            }

            @* function getAuthToken() {
                return localStorage.getItem('jwtToken') || getCookie('jwtToken');
            } *@
            function getAuthToken() {
            const localToken = localStorage.getItem('jwtToken');
            if (localToken) return localToken;
            return getCookie('jwtToken'); // Fallback to cookie
        }

            // AJAX with authentication
            function authenticatedAjax(options) {
                const token = getAuthToken();
                const defaults = {
                    headers: {
                        'Authorization': 'Bearer ' + token
                    }
                };
                return $.ajax({ ...defaults, ...options });
            }

                  $('#creatorFilter').on('change', function () {
                const filterValue = $(this).val();
                const userId = $("#userId").val();

                // Show loading indicator
                $('#taskLoadingIndicator').show();
                $('#taskTable tbody').empty();
                $('#noTasksMessage').hide();

                $.ajax({
                    url: 'http://localhost:5245/api/User/GetAllTasks',
                    type: 'GET',
                    success: function (data) {
                        $('#taskLoadingIndicator').hide();
                        $('#taskTable tbody').empty();

                        if (data && data.length > 0) {
                            // Filter the data based on selection
                            const filteredData = data.filter(task => {
                                if (filterValue === 'all') return true;
                                if (filterValue === 'admin') return task.c_created_by === 1;
                                if (filterValue === 'my') return task.c_created_by === parseInt(userId);
                                return true;
                            });

                            if (filteredData.length > 0) {
                                filteredData.forEach(function (task) {
                                    appendTaskToTable(task);
                                });
                                $('#noTasksMessage').hide();
                            } else {
                                $('#noTasksMessage').show();
                            }
                        } else {
                            $('#noTasksMessage').show();
                        }
                    },
                    error: function (error) {
                        $('#taskLoadingIndicator').hide();
                        $('#noTasksMessage').show();
                        console.error('Error loading tasks:', error);
                        toastr.error('Failed to load tasks.');
                    }
                });
            });



            function loadNotifications() {
                authenticatedAjax({
                    url: 'http://localhost:5245/api/User/my-notifications', // Updated API path
                    method: 'GET',
                    success: function (response) {
                        const notifications = response.notifications || [];
                        $('#notificationList').empty();

                        if (notifications.length > 0) {
                            let unreadCount = 0;
                            notifications.forEach(notification => {
                                if (!notification.c_is_read) unreadCount++;
                                appendNotificationToDropdown(notification);
                            });
                            $('#unreadCount').text(unreadCount).toggle(unreadCount > 0);
                        } else {
                            $('#notificationList').html('<div class="p-3 text-center text-muted">No notifications</div>');
                            $('#unreadCount').hide();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching notifications:', error);
                        $('#notificationList').html('<div class="p-3 text-center text-danger">Failed to load notifications</div>');

                        // If unauthorized, redirect to login
                        if (xhr.status === 401) {
                            window.location.href = '/Auth/Login';
                        }
                    }
                });
            }

            const debouncedLoadNotifications = debounce(loadNotifications, 1000);

            function appendNotificationToDropdown(notification) {
                const date = new Date(notification.c_created_at).toLocaleString('en-US', {
                    month: 'short',
                    day: 'numeric',
                    hour: 'numeric',
                    minute: 'numeric',
                    hour12: true
                });
                const unreadClass = notification.c_is_read ? '' : 'unread';
                const boldClass = notification.c_is_read ? '' : 'fw-bold';

                const item = `
                                                                            <div class="notification-item ${unreadClass}" data-notification-id="${notification.c_notification_id}">
                                                                                <div class="notification-message ${boldClass}">${notification.c_message}</div>
                                                                                <div class="notification-time">${date}</div>
                                                                                ${!notification.c_is_read ? `
                                                                                    <button class="btn btn-sm btn-outline-primary mark-as-read" data-notification-id="${notification.c_notification_id}">
                                                                                        Mark as Read
                                                                                    </button>
                                                                                ` : ''}
                                                                            </div>
                                                                        `;
                $('#notificationList').append(item);
            }

            function toggleNotificationDropdown() {
                $('#notificationDropdown').toggleClass('show');
            }

            // SignalR Handlers
            connection.on("ReceiveNotification", (data) => {
                const notifications = data.notifications || [];
                $('#notificationList').empty();

                if (notifications.length > 0) {
                    let unreadCount = 0;
                    notifications.forEach(notification => {
                        if (!notification.c_is_read) unreadCount++;
                        appendNotificationToDropdown(notification);
                    });
                    $("#unreadCount").text(data.count).toggle(data.count > 0);
                } else {
                    $('#notificationList').html('<div class="p-3 text-center text-muted">No notifications</div>');
                    $("#unreadCount").hide();
                }
            });

            @* connection.on("NotificationMarkedAsRead", (data) => {
                $(`[data-notification-id="${data.notificationId}"]`).removeClass("unread").remove();
                $("#unreadCount").text(data.unreadCount).toggle(data.unreadCount > 0);
                if ($("#notificationList").children().length === 0) {
                    $("#notificationList").html('<div class="p-3 text-center text-muted">No notifications</div>');
                }
            }); *@

            connection.on("NotificationMarkedAsRead", (notificationId) => {
            const $item = $(`[data-notification-id="${notificationId}"]`);
            $item.removeClass("unread").find(".notification-message").removeClass("fw-bold");
            $item.find(".mark-as-read").remove();
            const unreadCount = $('.notification-item.unread').length;
            $("#unreadCount").text(unreadCount).toggle(unreadCount > 0);
            if ($("#notificationList").children().length === 0) {
                $("#notificationList").html('<div class="p-3 text-center text-muted">No notifications</div>');
            }
        });

            connection.on("AllNotificationsMarkedAsRead", (data) => {
                $("#notificationList").empty().html('<div class="p-3 text-center text-muted">No notifications</div>');
                $("#unreadCount").text(0).hide();
            });

            // Initialize Notifications
            function initializeNotifications() {
                $('#notificationBell').click(function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    toggleNotificationDropdown();
                    debouncedLoadNotifications();
                });

                @* $(document).on('click', function (e) {
                    if (!$(e.target).closest('#notificationDropdown, #notificationBell').length) {
                        $('#notificationDropdown').removeClass('show');
                    }
                }); *@
                $(document).on('click', function (e) {
                if (!$(e.target).closest('#notificationDropdown, #notificationBell').length) {
                    $('#notificationDropdown').removeClass('show');
                }
            });
@* 
                $('#markAllRead').click(function (e) {
                    e.preventDefault();
                    connection.invoke("MarkAllNotificationsAsRead", currentUserId).catch(err => console.error(err));
                }); *@
                $('#markAllRead').click(function (e) {
                e.preventDefault();
                connection.invoke("MarkAllNotificationsAsRead")
                    .catch(err => console.error("Error marking all notifications:", err));
            });
                

                @* $(document).on('click', '.mark-as-read', function () {
                    const notificationId = $(this).data('notification-id');

                    connection.invoke("MarkNotificationAsRead", currentUserId, notificationId).catch(err => console.error(err));
                }); *@
                $(document).on('click', '.mark-as-read', function () {
                const notificationId = parseInt($(this).data('notification-id'));
                connection.invoke("MarkNotificationAsRead", notificationId)
                    .catch(err => console.error("Error marking notification:", err));
            });

                debouncedLoadNotifications(); // Initial load
                setInterval(debouncedLoadNotifications, 30000); // Every 30 seconds
            }

            // Toastr Configuration
            toastr.options = {
                "closeButton": true,
                "progressBar": true,
                "positionClass": "toast-top-right",
                "timeOut": "3000"
            };

            // Load tasks on page load
            loadTasks();
            initializeNotifications();

            // Event Handlers
                     $('#searchInput').on('input', debounce(function () {
                var searchTerm = $(this).val().trim();
                var userId = $("#userId").val();

                if (searchTerm.length > 0) {
                    $.ajax({
                        url: "http://localhost:5245/api/User/task/" + searchTerm + "/" + userId,
                        type: "GET",
                        dataType: "json",
                        success: function (data) {
                            // Clear existing table rows
                            $('#taskTable tbody').empty();

                            if (data && data.length > 0) {
                                // Add search results to table
                                data.forEach(function (task) {
                                    appendTaskToTable(task);
                                });
                                $('#noTasksMessage').hide();
                            } else {
                                $('#noTasksMessage').show();
                            }
                        },
                        error: function (e) {
                            console.error("Error searching tasks:", e);
                            toastr.error('Failed to search for tasks.');
                        }
                    });
                } else {
                    loadTasks();
                }
            }, 300));


            $('#btnSaveTask').click(function () {
                saveTask();
            });

            $('#btnAddTask, #btnEmptyStateAddTask').click(function () {
                resetTaskForm();
                const defaultDueDate = new Date();
                defaultDueDate.setDate(defaultDueDate.getDate() + 7);
                $('#taskDueDate').val(defaultDueDate.toISOString().slice(0, 16));
                $('#taskModalLabel').text('Add New Task');
                $('#taskModal').modal('show');
            });

            let taskToDeleteId = null; // Ensure this is defined globally in your script

            // Delegate click event for dynamically added delete buttons
            $(document).on('click', '.btn-delete', function () {
                taskToDeleteId = $(this).data('task-id');
                console.log(`Delete button clicked for task ID: ${taskToDeleteId}`);
                $('#deleteConfirmationModal').modal('show');
            });

            // Fix the delete confirmation button handler
            $(document).on('click', '#btnConfirmDelete', function () {
                console.log(`Confirming deletion for task ID: ${taskToDeleteId}`);
                if (taskToDeleteId) {
                    deleteTask(taskToDeleteId);
                } else {
                    console.error('No task ID found for deletion');
                    toastr.error('Could not identify the task to delete.');
                }
            });

            // Add this after your delete button handlers
            $(document).on('click', '.btn-edit', function () {
                const taskId = $(this).data('task-id');
                console.log(`Edit button clicked for task ID: ${taskId}`);
                getTaskById(taskId);
            });

            function deleteTask(taskId) {
                console.log(`Making DELETE request to delete task ID: ${taskId}`);
                authenticatedAjax({
                    url: `http://localhost:5245/api/User/${taskId}`,
                    type: 'DELETE',
                    success: function (response) {
                        console.log('Task deleted successfully:', response);
                        $('#deleteConfirmationModal').modal('hide');
                        toastr.success('Task deleted successfully!');
                        loadTasks();
                    },
                    error: function (xhr, error) {
                        console.error(`Error deleting task ID ${taskId}:`, error);
                        console.error('Status code:', xhr.status);
                        console.error('Response text:', xhr.responseText);
                        toastr.error('Failed to delete task. Please try again.');
                        $('#deleteConfirmationModal').modal('hide');
                        if (xhr.status === 401) {
                            window.location.href = '/Auth/Login';
                        }
                    }
                });
            }

            // Task Functions
            function loadTasks() {
                $('#taskLoadingIndicator').show();
                $('#taskTable tbody').empty();
                $('#noTasksMessage').hide();

                // Get the current user ID from the page variable
                const userId = currentUserId;

                authenticatedAjax({
                    url: `http://localhost:5245/api/User/GetAllTasks/${userId}`,
                    type: 'GET',
                    success: function (data) {
                        $('#taskLoadingIndicator').hide();
                        if (data && data.length > 0) {
                            data.forEach(function (task) {
                                appendTaskToTable(task);
                            });
                        } else {
                            $('#noTasksMessage').show();
                        }
                    },
                    error: function (xhr, error) {
                        $('#taskLoadingIndicator').hide();
                        $('#noTasksMessage').show();
                        console.error('Error loading tasks:', error);
                        toastr.error('Failed to load tasks.');
                        if (xhr.status === 401) {
                            window.location.href = '/Auth/Login';
                        }
                    }
                });
            }

            function appendTaskToTable(task) {
                const dueDate = task.c_due_date ? new Date(task.c_due_date).toLocaleString() : 'N/A';

                // Status mapping
                const statusMap = {
                    0: { text: 'New', class: 'badge-new' },
                    1: { text: 'In Progress', class: 'badge-in-progress' },
                    2: { text: 'Completed', class: 'badge-completed' }
                };

                const status = statusMap[task.c_status] || { text: 'Unknown', class: 'bg-secondary' };

                // Priority mapping
                const priorityMap = {
                    1: { text: 'Low', class: 'bg-info' },
                    2: { text: 'Medium', class: 'bg-primary' },
                    3: { text: 'High', class: 'bg-warning' },
                    4: { text: 'Urgent', class: 'bg-danger' }
                };

                const priority = priorityMap[task.c_priority] || { text: 'Medium', class: 'bg-primary' };

                const row = `
                            <tr data-task-id="${task.c_task_id}">
                                <td>#${task.c_task_id}</td>
                                <td class="fw-medium">${task.c_title}</td>
                                <td>
                                    <div class="text-wrap" style="max-width: 250px;">
                                        ${task.c_description || 'N/A'}
                                    </div>
                                </td>
                                <td><span class="badge ${status.class}">${status.text}</span></td>
                                <td><i class="far fa-calendar-alt me-2"></i>${dueDate}</td>
                                <td><span class="badge ${priority.class}">${priority.text}</span></td>
                                <td>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-primary btn-edit" data-task-id="${task.c_task_id}">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger btn-delete" data-task-id="${task.c_task_id}">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `;
                           const $row = $(row);
                    $row.data('task', task);
                $('#taskTable tbody').append(row);
            }

            function getTaskById(taskId) {
                $('#taskLoadingIndicator').show();
                authenticatedAjax({
                    url: `http://localhost:5245/api/User/${taskId}`,
                    type: 'GET',
                    success: function (task) {
                        $('#taskLoadingIndicator').hide();
                        if (task) {
                            $('#taskId').val(task.c_task_id);
                            $('#taskTitle').val(task.c_title);
                            $('#taskDescription').val(task.c_description);
                            $('#taskStatus').val(task.c_status);
                            $('#taskPriority').val(task.c_priority);

                            // Format date for datetime-local input
                            if (task.c_due_date) {
                                const dueDate = new Date(task.c_due_date);
                                const formattedDate = dueDate.toISOString().slice(0, 16);
                                $('#taskDueDate').val(formattedDate);
                            }

                            $('#taskModalLabel').text('Edit Task');
                            $('#taskModal').modal('show');
                        } else {
                            toastr.error('Task not found.');
                        }
                    },
                    error: function (xhr, error) {
                        $('#taskLoadingIndicator').hide();
                        console.error('Error fetching task:', error);
                        toastr.error('Failed to load task details.');
                        if (xhr.status === 401) {
                            window.location.href = '/Auth/Login';
                        }
                    }
                });
            }

            function saveTask() {
                const taskId = parseInt($('#taskId').val());
                const isNewTask = taskId === 0;

                const task = {
                    c_task_id: taskId,
                    c_title: $('#taskTitle').val(),
                    c_description: $('#taskDescription').val(),
                    c_status: parseInt($('#taskStatus').val()),
                    c_priority: parseInt($('#taskPriority').val()),
                    c_due_date: $('#taskDueDate').val(),
                    c_created_by: currentUserId,
                    c_assigned_to: currentUserId // In a real app, this might be different
                };

                if (!task.c_title) {
                    toastr.warning('Please enter a task title.');
                    return;
                }

                // Show loading state
                $('#btnSaveTask').prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');

                const url = isNewTask ?
                    'http://localhost:5245/api/User/AddTask' :
                    `http://localhost:5245/api/User/UpdateTask/${taskId}`;
                const method = isNewTask ? 'POST' : 'PUT';

                authenticatedAjax({
                    url: url,
                    type: method,
                    contentType: 'application/json',
                    data: JSON.stringify(task),
                    success: function (response) {
                        $('#taskModal').modal('hide');
                        toastr.success(isNewTask ? 'Task created successfully!' : 'Task updated successfully!');
                        loadTasks();
                        $('#btnSaveTask').prop('disabled', false).html('<i class="fas fa-save me-2"></i>Save Task');
                    },
                    error: function (xhr, error) {
                        console.error('Error saving task:', error);
                        console.error('Status code:', xhr.status);
                        console.error('Response text:', xhr.responseText);
                        toastr.error('Failed to save task. Please try again.');
                        $('#btnSaveTask').prop('disabled', false).html('<i class="fas fa-save me-2"></i>Save Task');

                        if (xhr.status === 401) {
                            window.location.href = '/Auth/Login';
                        }
                    }
                });
            }

            function deleteTask(taskId) {
                console.log(`Making DELETE request to delete task ID: ${taskId}`);
                authenticatedAjax({
                    url: `http://localhost:5245/api/User/${taskId}`,
                    type: 'DELETE',
                    success: function (response) {
                        console.log('Task deleted successfully:', response);
                        $('#deleteConfirmationModal').modal('hide');
                        toastr.success('Task deleted successfully!');
                        loadTasks();
                    },
                    error: function (xhr, error) {
                        console.error(`Error deleting task ID ${taskId}:`, error);
                        console.error('Status code:', xhr.status);
                        console.error('Response text:', xhr.responseText);
                        toastr.error('Failed to delete task. Please try again.');
                        $('#deleteConfirmationModal').modal('hide');
                        if (xhr.status === 401) {
                            window.location.href = '/Auth/Login';
                        }
                    }
                });
            }

            function resetTaskForm() {
                $('#taskId').val(0);
                $('#taskTitle').val('');
                $('#taskDescription').val('');
                $('#taskStatus').val(0); // Default to "New"
                $('#taskPriority').val(2); // Default to "Medium"
                const defaultDueDate = new Date();
                defaultDueDate.setDate(defaultDueDate.getDate() + 7);
                $('#taskDueDate').val(defaultDueDate.toISOString().slice(0, 16));
            }
        });
    </script>
}